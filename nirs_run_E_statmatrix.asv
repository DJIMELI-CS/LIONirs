function out = nirs_run_E_statmatrix(job)

xlslistfile = job.f_matrix{1};
[~,~,ext] =fileparts([xlslistfile]);
if strcmp(ext,'.xlsx')|strcmp(ext,'.xls')
    [raw, txt, info]=xlsread([xlslistfile]);
elseif strcmp(ext,'.txt')
    [num, txt, info] = readtxtfile_asxlsread([xlslistfile])
end
%Load the matrices same as any
groupeall = [];
for isubject=2:size(info,1)
    id = isubject-1;
    MAT = load(fullfile(info{isubject,1},[ info{isubject,2},'.mat']));
    DATA{id}.ZoneList = MAT.ZoneList;
    if isfield(MAT, 'meancorr')
        matcorr = MAT.meancorr;
        DATA{id}.MAT = matcorr;
    end
    
    DATA{id}.name = info{isubject,2};
    DATA{id}.MATtrial =  MAT.matcorr;
    DATA{id}.GR = info{isubject,4};
    infocov = [];
    if size(info,2) > 4
        %Define Additional covariable
        idcov = 1 ;
        for icolumn = 5:size(info,2)
            eval( ['DATA{id}.cov',num2str(idcov),' = ', num2str(info{isubject,icolumn}),';']);
            idcov=idcov+1;
            if isubject==2
                infocov = [infocov ;info(1,icolumn)];
            end
        end
    end
    
    
    DATA{id}.System = 'ISS';
    load(fullfile(info{isubject,1}, info{isubject,3}),'-mat');
    names = fieldnames(zone);
    for iname = 1:numel(names)
        eval(['DATA{id}.zone.',names{iname},' =zone.',names{iname},';']);
    end
    list_subject{id} =DATA{id}.name;
    groupeall = [groupeall; info{isubject,4}];
    clear MAT
end

if job.m_nodeunit==1 %channel mode
    idsubject = 1:numel(groupeall);
    for isubject = 1:numel(groupeall)
        MATall(isubject,:,:)=DATA{isubject}.MAT;
        groupid(isubject)= DATA{idsubject(isubject)}.GR;
    end
    ZONEid = [info{end,3}];
    ZoneList =  DATA{end}.ZoneList;
elseif  job.m_nodeunit==2
    MATall =zeros(numel(DATA),numel(DATA{id}.zone.label),numel(DATA{id}.zone.label));
    for isubject = 1:numel(groupeall)
        List = DATA{isubject}.ZoneList;
        for izone = 1:numel(DATA{isubject}.zone.label)
            ML = DATA{isubject}.zone.ml;
            DATA{isubject}.zone.plotLst;
            idlisti = [];
            idliststr = [];
            chzone = DATA{isubject}.zone.plotLst{izone};
            for ichzone = 1:numel(chzone);
                ich = chzone(ichzone);
                if strcmp(DATA{isubject}.System,'ISS')
                    strDet = SDDet2strboxy_ISS(ML(ich,2));
                    strSrs = SDPairs2strboxy_ISS(ML(ich,1));
                    idch = strmatch([strDet, ' ',strSrs ],List,'exact');
                end
                idliststr =[idliststr,{[strDet, ' ',strSrs ]}];
                idlisti = [idlisti, idch];
            end
            for jzone = 1:numel(DATA{isubject}.zone.label)
                idlistj = [];
                chzone = DATA{isubject}.zone.plotLst{jzone};
                for ichzone = 1:numel(chzone);
                    ich = chzone(ichzone);
                    if strcmp(DATA{isubject}.System,'ISS')
                        strDet = SDDet2strboxy_ISS(ML(ich,2));
                        strSrs = SDPairs2strboxy_ISS(ML(ich,1));
                        idch = strmatch([strDet, ' ',strSrs ],List,'exact');
                    end
                    idlistj = [idlistj, idch];
                end
                matROI = DATA{isubject}.MAT(idlisti,idlistj);
                id = find(matROI==0);
                if isempty(id)
                    matROI(id)=nan;
                end
                MATall(isubject,izone,jzone) = nanmean(matROI(:));
                if izone==jzone
                    matnbnanbyizone(isubject,izone)=numel(find(sum(double(isnan(matROI))) ==size(matROI,1)));
                    matnbtotchbyizone(isubject,izone) = size(matROI,1);
                end
            end
            
            
            
        end
        groupid(isubject)= DATA{isubject}.GR;
    end
    zoneuse=DATA{isubject}.zone;
    ZoneList = [];
    plottmp=[];
    plotLst = [];
    for izoneList = 1:size(MATall,2)
        MLfake(izoneList,1) = izoneList;%source
        MLfake(izoneList,2) = 1; %detecteur
        MLfake(izoneList,3) = 1;
        MLfake(izoneList,4) = 1;
        strDet = SDDet2strboxy_ISS(MLfake(izoneList,2));
        strSrs = SDPairs2strboxy_ISS(MLfake(izoneList,1));
        ZoneLabel{izoneList,1}=zoneuse.label{izoneList};
        ZoneList{izoneList,1} = [strDet,' ', strSrs];
        plottmp{izoneList} = [izoneList,1];
        plotLst{izoneList} = [izoneList];
    end
    %save zone list associate
    zone.plot = plottmp;
    zone.plotLst = plotLst;
    zone.label = ZoneLabel;
    zone.color = zone.color;
    zone.ml = MLfake;
    zone.chMAT = plotLst;
    save(fullfile(info{isubject,1},['avg', info{isubject,3}]),'zone','-mat');
    ZONEid = ['avg', info{isubject,3}];
end


if isfield(job.c_statmatrix,'b_TtestOneSamplematrix')
    AllC = [];
    id =1;
    %Use a specific groupe
    idG1 = find(  groupeall==job.c_statmatrix.b_TtestOneSamplematrix.e_TtestOneSampleGR);
    MATallG1 = MATall( idG1,:,:);
    meanall = squeeze(nanmean( MATallG1,1));
    refval  = 0.1;
    tval = squeeze((nanmean(MATallG1(:,:,:),1)-refval)./(nanstd(MATallG1(:,:,:),1)./sqrt(sum(~isnan(MATallG1(:,:,:)),1))  ));
    dfall = squeeze(sum(~isnan(MATallG1(:,:,:)),1))-1;
    for i=1:size(tval,1)
        for j=1:size(tval,2)
            try
                % Compute the correct p-value for the test, and confidence intervals
                % if requested.
                if job.c_statmatrix.b_TtestOneSamplematrix.m_TtestOneSample_matrix == 1 % two-tailed test
                     pval(i,j) = 2 * tcdf(-abs(-tval(i,j)), dfall(i,j));
                    %     if nargout > 2
                    %         crit = tinv((1 - alpha / 2), df) .* ser;
                    %         ci = cat(dim, xmean - crit, xmean + crit);
                    %     end
                elseif job.c_statmatrix.b_TtestOneSamplematrix.m_TtestOneSample_matrix == 3 % right one-tailed test
                     pval(i,j) = tcdf(-tval(i,j), dfall(i,j));
                    %     if nargout > 2
                    %         crit = tinv(1 - alpha, df) .* ser;
                    %         ci = cat(dim, xmean - crit, Inf(size(p)));
                    %     end
                elseif job.c_statmatrix.b_TtestOneSamplematrix.m_TtestOneSample_matrix == 2 % left one-tailed test
                     pval(i,j) = tcdf(tval(i,j), dfall(i,j));
                    %     if nargout > 2
                    %         crit = tinv(1 - alpha, df) .* ser;
                    %         ci = cat(dim, -Inf(size(p)), xmean + crit);
                    %     end
                end
            catch
                pval(i,j) = nan;
            end
        end
    end
    infonew = [{'Dir'},{'File'},{'Zone'},{'GR'}];
    file = 'tval';
   % ZoneList = MAT.ZoneList;
    matcorr =  tval;
    meancorr = tval;
    totaltrialgood = mean(dfall(:));
    save(fullfile(info{isubject,1},'tval.mat'),'ZoneList','matcorr','meancorr','totaltrialgood');
    new = [{info{isubject,1}},{file}, {ZONEid},{1} ];
    infonew = [infonew;new];
    
    file = 'tvalp05';
    matcorr = tval.*double(pval<0.05);
    meancorr = tval.*double(pval<0.05);
    save(fullfile(info{isubject,1},[file,'.mat']),'ZoneList','matcorr','meancorr','totaltrialgood');
    new = [{info{isubject,1}},{file}, {ZONEid},{1} ];
    infonew = [infonew;new];
    [FDR,Q] = mafdr(pval(:));
    Q = reshape(Q,size(pval));
    infonew = [infonew;new];
    
    file = 'meanp05';
    matcorr = meanall.*double(pval<0.05);
    meancorr = meanall.*double(pval<0.05);
    save(fullfile(info{isubject,1},[file,'.mat']),'ZoneList','matcorr','meancorr','totaltrialgood');
    new = [{info{isubject,1}},{file}, {ZONEid},{1} ];
    infonew = [infonew;new];
    
    file = 'tvalFDR05';
    matcorr = tval.*double(Q<0.05);
    meancorr = tval.*double(Q<0.05);
    save(fullfile(info{isubject,1},[file,'.mat']),'ZoneList','matcorr','meancorr','totaltrialgood');
    new = [{info{isubject,1}},{file}, {ZONEid},{1} ];
    infonew = [infonew;new];
    
    
    [FDR,Q] = mafdr(pval(:));
    Q = reshape(Q,size(pval));
    file = 'tvalFDR01';
    matcorr = tval.*double(Q<0.01);
    meancorr = tval.*double(Q<0.01);
    save(fullfile(info{isubject,1},[file,'.mat']),'ZoneList','matcorr','meancorr','totaltrialgood');
    new = [{info{isubject,1}},{file}, {ZONEid},{1} ];
    infonew = [infonew;new];
    
    %  dir1 = job.e_STATCOMPPath{1};
    [filepath,name,ext] = fileparts(xlslistfile);
    xlswrite(fullfile(filepath,[name,'SimpleTtest.xlsx']),infonew);
    disp(['xls write' fullfile(filepath,[name,'SimpleTtest.xlsx'])])

elseif isfield(job.c_statmatrix,'b_PermutationTest')
       ESTAD = 4;
        INDEP = 1;
        NPERM = str2num(job.c_statmatrix.b_PermutationTest.e_npermutation);
        g1 = find(groupid==job.c_statmatrix.b_PermutationTest.e_TtestOneSampleGR);
        g2 = find(groupid==job.c_statmatrix.b_PermutationTest.e_TtestOneSampleGR2);
         
        cb1 = MATall(g1,:,:);
        pb1 = MATall(g2,:,:);   
        %initialised 
        Toij=zeros(size( cb1,2));
        ncb1=zeros(size( cb1,2));
        npb1 =zeros(size( cb1,2));
;   
          
        if (sum(isnan(pb1(:)))+sum(isnan(cb1(:))))>0 %if presence NAN do the stat without them...
            for i=1:size(pb1,2) % row
                for j=1:size(cb1,3) %col
                    tmpcb1 = cb1(:,i,j);
                    tmppb1 = pb1(:,i,j);
                    idnan = find(isnan(tmpcb1));
                    if ~isempty(idnan)
                        tmpcb1(idnan)=[];
                    end
                    idnan = find(isnan(tmppb1));
                    if ~isempty(idnan)
                        tmppb1(idnan)=[];
                    end

                    [FSupSup,FSupDeriv,FSupTime,pij,tij] = TestPermut2Grupos(ESTAD,INDEP,tmpcb1,tmppb1,NPERM);
                    ncb1(i,j) = numel(tmpcb1);
                    npb1(i,j) = numel(tmppb1);
                    FUniv(i,j) = pij;
                    Toij(i,j) = tij;
                end
            end
        else
            [FSupSup,FSupDeriv,FSupTime,FUniv,Toij] = TestPermut2Grupos(ESTAD,INDEP,pb1,cb1,NPERM);
            ncb1 = ones(size(cb1,2),size(cb1,3))*numel(size(cb1,1));  
            npb1 = ones(size(pb1,2),size(pb1,3))*numel(size(pb1,1));
        end
        MeanG1 = squeeze(nanmean(cb1));
        MeanG2 = squeeze(nanmean(pb1));

        %WRITE IN A NEW FILE
        infonew = [info(1,:);repmat(info(2,:),6,1)];    
        isubject=2;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation tstat']);
        matcorr = Toij;
        meancorr = Toij;
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,2} = [modelabel,'permutation tstat'];
        infonew{isubject,3} = ZONEid;    
        isubject=3;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation 1-Pval']);
        matcorr = 1-FUniv;
        meancorr = 1-FUniv;
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,2} = [modelabel,'permutation 1-Pval'];
        infonew{isubject,3} = ZONEid;    
        isubject=4;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation G1-G2']);
        matcorr = real(squeeze((nanmean(cb1,1)- nanmean(pb1,1))));
        meancorr = real(squeeze((nanmean(cb1,1)- nanmean(pb1,1))));
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,2} = [modelabel,'permutation G1-G2'];
        infonew{isubject,3} = ZONEid;    
        isubject=5;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation G2-G1']);
        matcorr = real(squeeze(nanmean(pb1,1))-squeeze(nanmean(cb1,1)));
        meancorr = real(squeeze(nanmean(pb1,1))-squeeze(nanmean(cb1,1)));
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,2} = [modelabel,'permutation G2-G1'];
        infonew{isubject,3} = ZONEid;
        isubject=6;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation G1-G2 p' sprintf('%02.0f',thr_p*100)]);
        matcorr = real(squeeze(nanmean(cb1,1))-squeeze(nanmean(pb1,1))).*double(FUniv<thr_p);
        meancorr = real(squeeze(nanmean(cb1,1))-squeeze(nanmean(pb1,1))).*double(FUniv<thr_p);
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,2} = [modelabel,'permutation G1-G2 p',sprintf('%02.0f',thr_p*100)];
        infonew{isubject,3} = ZONEid;
        isubject=7;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation G2-G1 p',sprintf('%02.0f',thr_p*100)]);
        matcorr = real(squeeze(nanmean(pb1,1))-squeeze(nanmean(cb1,1))).*double(FUniv<thr_p);
        meancorr = real(squeeze(nanmean(pb1,1))-squeeze(nanmean(cb1,1))).*double(FUniv<thr_p);
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,2} = [modelabel,'permutation G2-G1 p',sprintf('%02.0f',thr_p*100)];
        infonew{isubject,3} = ZONEid;    
        isubject=8;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation mean G1']);
        matcorr = real(squeeze(nanmean(cb1,1)));
        meancorr = real(squeeze(nanmean(cb1,1)));
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,1} = info{2,1};
        infonew{isubject,2} = [modelabel,'permutation mean G1'];
        infonew{isubject,3} = ZONEid;
        infonew{isubject,4} = 1;
        isubject=9;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation mean G2']);
        matcorr = real(squeeze(nanmean(pb1,1)));
        meancorr = real(squeeze(nanmean(pb1,1)));
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,1} = info{2,1};
        infonew{isubject,2} = [modelabel,'permutation mean G2'];
        infonew{isubject,3} = ZONEid;
        infonew{isubject,4} = 1;        
        isubject=10;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation N G1']);
        matcorr = ncb1;
        meancorr = ncb1;
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,1} = info{2,1};
        infonew{isubject,2} = [modelabel,'permutation N G1'];
        infonew{isubject,3} = ZONEid;
        infonew{isubject,4} = 1;    
        isubject=11;
        filenameout = fullfile(info{2,1}, [modelabel,'permutation N G2']);
        matcorr = npb1;
        meancorr = npb1;
        save(filenameout,'ZoneList','matcorr','meancorr');
        infonew{isubject,1} = info{2,1};
        infonew{isubject,2} = [modelabel,'permutation N G2'];
        infonew{isubject,3} = ZONEid;
        infonew{isubject,4} = 1;    
        [pathstr, name, ext] = fileparts(xlslistfile);
        [file,path]= uiputfile([pathstr, filesep,name,modelabel ,'_permutation',ext]); 
    if ismac
        % Code to run on Mac platform
        writetxtfile([path,file],infonew);
    elseif isunix
        % Code to run on Linux platform
         xlswrite([path,file],infonew); 
    elseif ispc
        % Code to run on Windows platform
        xlswrite([path,file],infonew); 
    else
        disp('Platform not supported')
    end
    
end
out='Stat tests';

